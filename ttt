#include <iostream>
#include <iomanip>
#include <vector>
#include <fstream>
#include <string>
#include <windows.h>
#include <conio.h>
#include <sstream>

using namespace std;

struct User {
    string username, password, firstname, lastname, contactnumber, emailaddress;
    bool isAdmin;
    float money = 100.0f;
};

struct Book {
    string bookname, author, booknum, publicationDate, genre, numPages, rating;
    float price;
    float rentprice;
    int quantity;
};

class Bookstore {
private:
    User currentUser ;
    vector<Book> books;

public:
    User getCurrentUser () const {
        return currentUser ;
    }

    bool isValidEmail(const string& emailaddress) {
        return emailaddress.size() >= 10 && emailaddress.compare(emailaddress.size() - 10, 10, "@gmail.com") == 0;
    }

    void cl() {
        system("cls");
    }

    bool isUsernameTaken(const string& username) {
        ifstream inFile("bookstoreaccounts.txt");
        string line;
        while (getline(inFile, line)) {
            size_t pos = line.find(',');
            if (pos != string::npos) {
                string existingUsername = line.substr(0, pos);
                if (existingUsername == username) {
                    return true;
                }
            }
        }
        return false;
    }

    void registeraccount() {
        char ch;
        User newUser ;

        cout << "Enter your Username :: ";
        cin >> newUser.username;

        if (newUser.username == "admin" || newUser.username == "Admin" || newUser.username == "ADMIN") {
            cout << "Invalid username" << endl;
            return;
        }

        if (isUsernameTaken(newUser.username)) {
            cout << "Username already used. Please choose a different username." << endl;
            return;
        }

        while (true) {
            cout << "Enter your Password :: ";
            newUser.password.clear();
            int i = 0;
            while (true) {
                ch = getch();
                if (ch == 13) {
                    break;
                } else if (ch == 8) {
                    if (i > 0) {
                        i--;
                        newUser.password.pop_back();
                        cout << "\b \b";
                    }
                } else {
                    newUser.password += ch;
                    cout << "*";
                    i++;
                }
            }

            if (newUser.password.length() < 8) {
                cout << "\nPassword requires 8 characters long!" << endl;
                Sleep(1000);
            } else {
                break;
            }
        }

        cin.ignore();
        cout << "\nEnter your FirstName :: ";
        getline(cin, newUser.firstname);
        cout << "Enter your LastName :: ";
        cin >> newUser.lastname;
        cout << "Enter your ContactNumber :: ";
        cin >> newUser.contactnumber;
        while (true) {
            cout << "Enter your Email :: ";
            cin >> newUser.emailaddress;

            if (isValidEmail(newUser.emailaddress)) {
                break;
            } else {
                cout << "Invalid email. Please use a @gmail.com email." << endl;
            }
        }

        newUser.money = 100.0f;

        ofstream outFile("bookstoreaccounts.txt", ios::app);
        if (outFile.is_open()) {
            outFile << newUser.username << ","
                    << newUser.password << ","
                    << newUser.firstname << ","
                    << newUser.lastname << ","
                    << newUser.contactnumber << ","
                    << newUser.emailaddress << ","
                    << fixed << setprecision(2) << newUser.money << endl;
            outFile.close();
            cl();
            cout << "\nRegistration Complete!" << endl;
            system("pause");
            return;
        } else {
            cout << "Error: Unable to open file!\n";
        }
    }

    bool login() {
        string username, password;
        char ch;

        while (true){
            cout << "Enter your Username: ";
            cin >> username;

            if(isUsernameTaken(username) || username == "admin"){
                break;
            } else {
                cout <<"Invalid Username"<<endl;
            }
        }

        for (int attempt = 0; attempt < 3; attempt++) {
            cout << "Enter your Password: ";
            password.clear();
            int i = 0;
            while (true) {
                ch = getch();
                if (ch == 13) {
                    break;
                } else if (ch == 8) {
                    if (i > 0) {
                        i--;
                        password.pop_back();
                        cout << "\b \b";
                    }
                } else {
                    password += ch;
                    cout << "*";
                    i++;
                }
            }
            cout << endl;

            if (username == "admin" && password == "adminpass") {
                currentUser.username = username;
                currentUser.password = password;
                currentUser.firstname = "Admin";
                currentUser.lastname = "Administrator";
                currentUser.isAdmin = true;
                currentUser.money = 0.0f;
                return true;
            }

            ifstream inFile("bookstoreaccounts.txt");
            if (!inFile.is_open()) {
                cout << "Error: Unable to open file!\n";
                return false;
            }

            string line;
            while (getline(inFile, line)) {
                size_t pos = 0;
                string data[7];
                int i = 0;
                while ((pos = line.find(",")) != string::npos && i < 6 ) {
                    data[i] = line.substr(0, pos);
                    line.erase(0, pos + 1);
                    i++;
                }
                data[i] = line;

                if (data[0] == username && data[1] == password) {
                    currentUser.username = data[0];
                    currentUser.password = data[1];
                    currentUser.firstname = data[2];
                    currentUser.lastname = data[3];
                    currentUser.contactnumber = data[4];
                    currentUser.emailaddress = data[5];
                    currentUser.money = stof(data[6]);
                    currentUser.isAdmin = false;
                    inFile.close();
                    return true;
                }
            }
            inFile.close();

            cout << "\nInvalid username or password! Attempts left: " << (2 - attempt) << endl;
        }

        cout << "Too many failed attempts. Exiting login." << endl;
        return false;
    }

    void addbooks() {
        Book newBook;

        cin.ignore();
        cout << "Enter book name: ";
        getline(cin, newBook.bookname);

        cout << "Enter book author: ";
        getline(cin, newBook.author);

        cout << "Enter book book number: ";
        getline(cin, newBook.booknum);

        cout << "Enter book publication date: ";
        getline(cin, newBook.publicationDate);

        cout << "Enter book genre: ";
        getline(cin, newBook.genre);

        cout << "Enter book number of pages: ";
        getline(cin, newBook.numPages);

        cout << "Enter book rating: ";
        getline(cin, newBook.rating);

        cout << "Enter book price: ";
        cin >> newBook.price;
        cin.ignore();

        cout << "Enter book rent price: ";
        cin >> newBook.rentprice;
        cin.ignore();

        cout << "Enter book quantities: ";
        cin >> newBook.quantity;
        cin.ignore();

        books.push_back(newBook);

        ofstream outFile("bookstorebooks.txt", ios::app);
        if (outFile.is_open()) {
            outFile << newBook.bookname << ","
                    << newBook.author << ","
                    << newBook.booknum << ","
                    << newBook.publicationDate << ","
                    << newBook.genre << ","
                    << newBook.numPages << ","
                    << newBook.rating << ","
                    << fixed << setprecision(2) << newBook.price << ","
                    << fixed << setprecision(2) << newBook.rentprice << ","
                    << newBook.quantity << endl;
            outFile.close();
            cl();
            cout << "\nBooks Added!" << endl;
            system("pause");
        } else {
            cout << "Error: Unable to open file!\n";
        }
    }


    void saveBooksToFile() {
        ofstream outFile("bookstorebooks.txt");
        if (!outFile.is_open()) {
            cout << "Error: Unable to open file when saving books!" << endl;
            return;
        }
        for (const auto& newBook : books) {
            outFile << newBook.bookname << ","
                    << newBook.author << ","
                    << newBook.booknum << ","
                    << newBook.publicationDate << ","
                    << newBook.genre << ","
                    << newBook.numPages << ","
                    << newBook.rating << ","
                    << fixed << setprecision(2) << newBook.price << ","
                    << fixed << setprecision(2) << newBook.rentprice << ","
                    << newBook.quantity << endl;
        }
        outFile.close();
    }

    void viewbooks() {
    ifstream inFile("bookstorebooks.txt");
    if (!inFile.is_open()) {
        cout << "Error: Unable to open file!" << endl;
        return;
    }

    books.clear();

    string line;
    while (getline(inFile, line)) {
        Book book;
        stringstream ss(line);
        string field;
        int i = 0;

        while (getline(ss, field, ',')) {
            switch (i) {
                case 0: book.bookname = field; break;
                case 1: book.author = field; break;
                case 2: book.booknum = field; break;
                case 3: book.publicationDate = field; break;
                case 4: book.genre = field; break;
                case 5: book.numPages = field; break;
                case 6: book.rating = field; break;
                case 7: book.price = stof(field); break;
                case 8: book.rentprice = stof(field); break;
                case 9: book.quantity = stoi(field); break;
            }
            i++;
        }

        if (i >= 10) {
            books.push_back(book);
        }
    }
    inFile.close();

    if (books.empty()) {
        cout << "No books available." << endl;
        return;
    }

    const int booksPerRow = 3;
    const int rowsPerPage = 3;
    const int booksPerPage = booksPerRow * rowsPerPage;
    int totalBooks = books.size();
    int totalPages = (totalBooks + booksPerPage - 1) / booksPerPage;
    int currentPage = 1;

    while (true) {
        cout << fixed << setprecision(2);
        cout << "Available Books (Page " << currentPage << " of " << totalPages << "):\n\n";

        int startIndex = (currentPage - 1) * booksPerPage;
        int endIndex = min(startIndex + booksPerPage, totalBooks);

        for (int row = 0; row < rowsPerPage && startIndex + row * booksPerRow < endIndex; ++row) {
            for (int col = 0; col < booksPerRow; ++col) {
                int index = startIndex + row * booksPerRow + col;
                if (index >= endIndex) break;

                const auto& book = books[index];
                cout << left;
                cout << setw(40) << ("Book Name: " + book.bookname);
            }
            cout << endl;
            for (int col = 0; col < booksPerRow; ++col) {
                int index = startIndex + row * booksPerRow + col;
                if (index >= endIndex) break;

                const auto& book = books[index];
                cout << left;
                cout << setw(40) << ("Author: " + book.author);
            }
            cout << endl;
            for (int col = 0; col < booksPerRow; ++col) {
                int index = startIndex + row * booksPerRow + col;
                if (index >= endIndex) break;

                const auto& book = books[index];
                cout << left;
                cout << setw(40) << ("Genre: " + book.genre);
            }
            cout << endl;
            for (int col = 0; col < booksPerRow; ++col) {
                int index = startIndex + row * booksPerRow + col;
                if (index >= endIndex) break;

                const auto& book = books[index];
                cout << left;
                cout << ("Price: $") << fixed << setprecision(2)<<setw(32)<<left << book.price;


            }for (int col = 0; col < booksPerRow; ++col) {
                int index = startIndex + row * booksPerRow + col;
                if (index >= endIndex) break;

                const auto& book = books[index];
                cout << left;
                cout << ("Price: $") << fixed << setprecision(2)<< setw(32)<<left << book.rentprice;

            }

            cout << endl;
            for (int col = 0; col < booksPerRow; ++col) {
                int index = startIndex + row * booksPerRow + col;
                if (index >= endIndex) break;

                const auto& book = books[index];
                cout << left;
                cout << setw(40) << ("Stock: " + to_string(book.quantity));
            }
            cout << endl << endl;
        }

        cout << "1. Previous Page  2. Next Page  0. Exit View\nEnter choice: ";
        int choice;
        cin >> choice;

        if (choice == 1 && currentPage > 1) {
            currentPage--;
        } else if (choice == 2 && currentPage < totalPages) {
            currentPage++;
        } else if (choice == 0) {
            break;
        } else {
            cout << "Invalid choice or already at boundary page." << endl;
        }
    }
}


    void saveUsersToFile() {
        ifstream inFile("bookstoreaccounts.txt");
        vector<User> allUsers;
        if (!inFile.is_open()) {
            cout << "Error: Unable to open user file!" << endl;
            return;
        }
        string line;
        while (getline(inFile, line)) {
            User user;
            stringstream ss(line);
            string field;
            int i = 0;
            while (getline(ss, field, ',')) {
                switch(i) {
                    case 0: user.username = field; break;
                    case 1: user.password = field; break;
                    case 2: user.firstname = field; break;
                    case 3: user.lastname = field; break;
                    case 4: user.contactnumber = field; break;
                    case 5: user.emailaddress = field; break;
                    case 6: user.money = stof(field); break;
                }
                i++;
            }
            allUsers.push_back(user);
        }
        inFile.close();

        for (auto& user : allUsers) {
            if (user.username == currentUser.username) {
                user.money = currentUser.money;
                break;
            }
        }

        ofstream outFile("bookstoreaccounts.txt");
        if (!outFile.is_open()) {
            cout << "Error: Unable to open user file for writing!" << endl;
            return;
        }

        for (const auto& user : allUsers) {
            outFile << user.username << ","
                    << user.password << ","
                    << user.firstname << ","
                    << user.lastname << ","
                    << user.contactnumber << ","
                    << user.emailaddress << ","
                    << fixed << setprecision(2) << user.money << endl;
        }
        outFile.close();
    }

void rentandbuy(){
    if (books.empty()){
        cout << "Books list is empty, Out of stock"<< endl;
    }

    string bookName;
    cout << "Enter the name of the books you want to buy/rent"<<endl;
    cin.ignore();
    getline(cin, bookName);

    bool rented = false;
    bool bought = false;

    for(auto& book : books){
        if (book.bookname == bookName){
            if (book.quantity > 0){
                string buyrent;
                cout << "Type Buy if you want to buy / Rent if you want to rent"<<endl;
                cin >> buyrent;
                if (buyrent == "buy" || buyrent == "Buy"){
                    if (currentUser.money >= book.price){
                     currentUser.money -= book.price;
                     book.quantity--;
                     cout << "You have successfully purchased a book: "<<book.bookname<< " for $" <<fixed <<setprecision(2)<<book.price <<endl;
                     cout << "Remaining balance: $"<<currentUser.money <<endl;
                     bought = true;
                     saveBooksToFile();
                     saveUsersToFile();
                    }else{
                        cout << "Sorry you do not have money to buy this book!"<<endl;
                    }
                }else if(buyrent == "rent" || buyrent == "Rent"){
                    if (currentUser.money >= book.rentprice){
                        currentUser.money -= book.rentprice;
                        book.quantity--;
                        cout << "You have successfully rented the book: "<<book.bookname << "for &" << fixed <<setprecision (2)<< book.rentprice<<endl;
                        cout << "Remaining balance: $" << currentUser.money<<endl;
                        rented = true;
                        saveBooksToFile();
                        saveUsersToFile();
                    }else{
                        cout << "Sorry you do not have enough money to rent this book"<<endl;
                    }
                }
        }else {
            cout << "Sorry, This book is out of stock"<<endl;
        }
    } else {
        cout << "Book not found"<<endl;
    }
}   if (!rented && !bought){
    cout << "Book not found"<<endl;
}
}

    void userMenu() {
        while (true) {
            int choice;
            cout << "\nUser Menu: \n1. Buy/rent Book\n2 View Books\n3. Logout\nEnter choice: ";
            cin >> choice;

            if (choice == 1) {
                rentandbuy();
            } else if (choice == 2) {
                viewbooks();
            } else if (choice == 3) {
                break;
            } else {
                cout << "Invalid choice" << endl;
            }
        }
    }
};

int main() {
    Bookstore store;
    while (true) {
        int choice;
        cout << "\nMain Menu: \n1. Register\n2. Login\n3. Exit\nEnter choice: ";
        cin >> choice;

        if (choice == 1) {
            store.registeraccount();
        } else if (choice == 2) {
            if (store.login()) {
                if (store.getCurrentUser().isAdmin) {
                    while (true) {
                        int subchoice;
                        cout << "\nAdmin Menu: \n1. Add Books\n2. View Books\n3. Logout\nEnter choice: ";
                        cin >> subchoice;
                        if (subchoice == 1) {
                            store.addbooks();
                        } else if (subchoice == 2) {
                            store.viewbooks();
                        } else if (subchoice == 3) {
                            break;
                        } else {
                            cout << "Invalid choice" << endl;
                        }
                    }
                } else {
                    store.userMenu();
                }
            }
        } else if (choice == 3) {
            break;
        } else {
            cout << "Invalid choice" << endl;
        }
    }
    return 0;
}
